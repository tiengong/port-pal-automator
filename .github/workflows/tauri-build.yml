name: Tauri Build for Windows

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # 步骤1：拉取代码（包含完整历史，确保依赖解析正确）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2：验证核心文件存在性（提前排查路径问题）
      - name: Verify critical files/directories
        run: |
          echo "=== Root directory files ==="
          dir
          echo "=== Check src-tauri (Tauri core) ==="
          if (Test-Path src-tauri) { echo "✅ src-tauri exists" } else { echo "❌ src-tauri missing"; exit 1; }
          echo "=== Check package-lock.json (npm deps) ==="
          if (Test-Path package-lock.json) { echo "✅ package-lock.json exists" } else { echo "❌ package-lock.json missing"; exit 1; }
          echo "=== Check src-tauri/Cargo.toml (Rust deps) ==="
          if (Test-Path src-tauri/Cargo.toml) { echo "✅ Cargo.toml exists" } else { echo "❌ Cargo.toml missing"; exit 1; }
        shell: pwsh

      # 步骤3：安装Node.js（匹配项目依赖，缓存npm依赖）
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"  # 兼容@tauri-apps/cli@2.8.4（需Node>=10）
          cache: "npm"
          cache-dependency-path: ./package-lock.json  # 根目录锁文件路径正确

      # 步骤4：设置Rust工具链（Tauri构建必需）
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # 步骤4.5：安装Windows构建依赖（NSIS、WiX、ImageMagick）
      - name: Install Windows build dependencies
        run: |
          choco install nsis -y
          choco install wixtoolset -y
          choco install imagemagick -y
        shell: pwsh

      # 步骤4.6：生成所需图标文件
      - name: Generate icon files
        run: |
          echo "=== Generating icon files ==="
          
          # Create a simple app icon using ImageMagick (geometric design)
          echo "🎨 Creating base icon design..."
          magick -size 128x128 canvas:transparent `
            -fill "#3B82F6" -draw "roundrectangle 16,16 112,112 16,16" `
            -fill "#FFFFFF" -pointsize 48 -gravity center `
            -annotate +0+0 "SW" "src-tauri/icons/base-icon.png"
          
          if ($LASTEXITCODE -ne 0) {
            echo "❌ Failed to create base icon"; exit 1
          }
          
          # Generate all required sizes
          echo "📐 Generating icon sizes..."
          magick "src-tauri/icons/base-icon.png" -resize 32x32 "src-tauri/icons/32x32.png"
          magick "src-tauri/icons/base-icon.png" -resize 128x128 "src-tauri/icons/128x128.png"
          magick "src-tauri/icons/base-icon.png" -resize 256x256 "src-tauri/icons/128x128@2x.png"
          
          # Generate ICO file with multiple sizes
          echo "🔧 Creating Windows ICO file..."
          magick "src-tauri/icons/32x32.png" "src-tauri/icons/128x128.png" "src-tauri/icons/icon.ico"
          
          # Generate ICNS for macOS (if needed)
          echo "🍎 Creating macOS ICNS file..."
          magick "src-tauri/icons/128x128.png" "src-tauri/icons/icon.icns"
          
          if ($LASTEXITCODE -eq 0) {
            echo "✅ Successfully generated all icon files"
            echo "📋 Generated files:"
            ls src-tauri/icons/ | ForEach-Object { echo "  - $_" }
          } else {
            echo "❌ Failed to generate icon files"; exit 1
          }
        shell: pwsh

      # 步骤5：安装前端依赖（ci模式更严格，确保依赖一致性）
      - name: Install frontend dependencies
        run: npm ci --no-cache
        env:
          npm_config_registry: https://registry.npmjs.org

      # 步骤6：验证Tauri CLI安装
      - name: Verify Tauri CLI installation
        run: |
          npx tauri@1.6.3 --version
          npx tauri@1.6.3 info --config src-tauri/tauri.conf.json
          if ($LASTEXITCODE -ne 0) { exit 1 }
        shell: pwsh

      # 步骤7：构建Tauri应用
      - name: Build Tauri app (release mode)
        run: npx tauri@1.6.3 build --config src-tauri/tauri.conf.json
        env:
          TAURI_BUILD_MODE: release
          TAURI_CONFIG: src-tauri/tauri.conf.json
        working-directory: ./  # 确保在项目根目录执行（npx找node_modules）

      # 步骤8：上传构建产物（按平台分类，保留7天）
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: serial-wiz-windows
          path: |
            ./src-tauri/target/release/bundle/**/*
            !./src-tauri/target/release/bundle/**/temp/
          retention-days: 7
          compression-level: 6